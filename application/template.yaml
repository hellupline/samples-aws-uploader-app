---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'HellUpLine Uploader Application'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: {default: 'Api Parameters'}
            Parameters:
              - AcmCertificateArn
              - DomainName

Parameters:
    AcmCertificateArn:
        Description: 'The ARN of the SSL certificate to use for the ApiGateway.'
        Type: String
    DomainName:
        Description: 'The application domain name.'
        Type: String

Mappings: {}

Conditions: {}

Resources:
    #
    # Functions
    #
    CreateUploadUrlFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: create_upload_url/
            Handler: app.lambda_handler
            Runtime: python3.7
            Timeout: 3
            Environment:
                Variables:
                    BUCKET_NAME: !Ref UploadBucket
                    KEY_PREFIX: "user-files"
                    TABLE_NAME: !Ref UploadTable
            Events:
                CreateUploadUrl:
                    Type: Api
                    Properties:
                        Path: /create-upload-url
                        Method: POST
                        RestApiId: !Ref RestApi
                        Auth:
                            Authorizer: CognitoAuthorizer
            Policies:
              - Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - 'dynamodb:PutItem'
                    Resource:
                      - !Sub '${UploadTable.Arn}'
                  - Effect: Allow
                    Action:
                      - 's3:PutObject'
                    Resource:
                      - !Sub '${UploadBucket.Arn}/*'

    #
    # Api
    #
    RestApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: Prod
            Cors:
                AllowMethods: "'OPTIONS,HEAD,GET,POST,PATCH,PUT,DELETE'"
                AllowHeaders: "'X-Forwarded-For,Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                AllowOrigin: "'*'"
                MaxAge: "'600'"
                AllowCredentials: "'true'"
            Auth:
                # DefaultAuthorizer: CognitoAuthorizer
                Authorizers:
                    CognitoAuthorizer:
                        UserPoolArn: !GetAtt UserPool.Arn
            MethodSettings:
              - HttpMethod: "*"
                ResourcePath: "/*"
                LoggingLevel: INFO
                DataTraceEnabled: true
                MetricsEnabled: true

    RestApiDomainName:
        Type: AWS::ApiGateway::DomainName
        Properties:
            CertificateArn: !Ref AcmCertificateArn
            DomainName: !Ref DomainName

    RestApiPathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        Properties:
            DomainName: !Ref RestApiDomainName
            RestApiId: !Ref RestApi
            Stage: Prod

    #
    # Storage
    #
    UploadBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: True
                BlockPublicPolicy: True
                IgnorePublicAcls: True
                RestrictPublicBuckets: True
            CorsConfiguration:
                CorsRules:
                  - Id: SignedUrlLambda
                    AllowedMethods: ['GET', 'POST', 'PUT']
                    AllowedHeaders: ['*']
                    AllowedOrigins: ['*']
                    ExposedHeaders: ['ContentType', 'Date']
                    MaxAge: 3600
            LifecycleConfiguration:
                Rules:
                  - Id: IncompleteUploads
                    Status: Enabled
                    AbortIncompleteMultipartUpload:
                        DaysAfterInitiation: 5

    UploadTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
              - {AttributeName: "UserId", AttributeType: "S"}
              - {AttributeName: "StorageKey", AttributeType: "S"}
              - {AttributeName: "Filename", AttributeType: "S"}
            KeySchema:
              - {AttributeName: "UserId", KeyType: "HASH"}
              - {AttributeName: "StorageKey", KeyType: "RANGE"}
            LocalSecondaryIndexes:
              - IndexName: "Path"
                KeySchema:
                  - {AttributeName: "UserId", KeyType: "HASH"}
                  - {AttributeName: "Filename", KeyType: "RANGE"}
                Projection:
                    NonKeyAttributes:
                      - "StorageKey"
                    ProjectionType: INCLUDE

    #
    # Authentication
    #
    UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                UnusedAccountValidityDays: 30
                InviteMessageTemplate:
                    EmailMessage: 'Your username is {username} and temporary password is {####}.'
                    EmailSubject: 'Your temporary password'
            SmsConfiguration:
                ExternalId: !Sub "${AWS::StackName}-external"
                SnsCallerArn: !GetAtt SMSRole.Arn
            SmsVerificationMessage: 'Your verification code is {####}.'
            SmsAuthenticationMessage: 'Your authentication code is {####}.'
            EmailConfiguration:
                ReplyToEmailAddress: donotreply@domain.tld
                EmailSendingAccount: COGNITO_DEFAULT
            EmailVerificationMessage: 'Your verification code is {####}.'
            EmailVerificationSubject: 'Your verification code'
            MfaConfiguration: 'OPTIONAL'
            AutoVerifiedAttributes:
              - email
            UsernameAttributes:
              - email
            Policies:
                PasswordPolicy:
                    MinimumLength: 12
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: true
                    RequireUppercase: true
            Schema:
              - AttributeDataType: String
                Name: email
                Mutable: false
                Required: true
              - AttributeDataType: String
                Name: name
                StringAttributeConstraints:
                    MaxLength: 255
                    MinLength: 6
                Mutable: true
                Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
            - USER_PASSWORD_AUTH

    IdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
              - ProviderName: !GetAtt UserPool.ProviderName
                ClientId: !Ref UserPoolClient

    SMSRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Principal: {Service: ['cognito-idp.amazonaws.com'] }
                    Action:
                      - 'sts:AssumeRole'
            Policies:
              - PolicyName: cognito-sns-sms
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: 'Allow'
                        Action:
                          - 'sns:publish'
                        Resource:
                          - '*'

    CognitoAuthorizedRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Principal: {Federated: 'cognito-identity.amazonaws.com'}
                    Action:
                      - 'sts:AssumeRoleWithWebIdentity'
                    Condition:
                        StringEquals:
                            'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
                        'ForAnyValue:StringLike':
                            'cognito-identity.amazonaws.com:amr': 'authenticated'
            Policies:
              - PolicyName: CognitoAuthorizedPolicy
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: 'Allow'
                        Action:
                          - 'mobileanalytics:PutEvents'
                          - 'cognito-sync:*'
                          - 'cognito-identity:*'
                        Resource:
                          - '*'
                      - Effect: 'Allow'
                        Action:
                          - 'lambda:InvokeFunction'
                        Resource:
                          - '*'

    CognitoUnAuthorizedRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Principal: {Federated: 'cognito-identity.amazonaws.com'}
                    Action:
                      - 'sts:AssumeRoleWithWebIdentity'
                    Condition:
                        StringEquals:
                            'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
                        'ForAnyValue:StringLike':
                            'cognito-identity.amazonaws.com:amr': 'unauthenticated'
            Policies:
              - PolicyName: CognitoUnauthorizedPolicy
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: 'Allow'
                        Action:
                          - 'mobileanalytics:PutEvents'
                          - 'cognito-sync:*'
                        Resource:
                          - '*'

    IdentityPoolRoleMapping:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref IdentityPool
            Roles:
                authenticated: !GetAtt CognitoAuthorizedRole.Arn
                unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

Outputs:
    EndpointDomainName:
        Description: "API Gateway endpoint URL for Prod stage"
        # Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
        Value: !Sub "https://${DomainName}"

    # Functions
    CreateUploadUrlFunction:
        Description: "Get Upload URL Lambda Function ARN"
        Value: !GetAtt CreateUploadUrlFunction.Arn
    CreateUploadUrlFunctionIamRole:
        Description: "Implicit IAM Role created for CreateUploadUrlFunction"
        Value: !GetAtt CreateUploadUrlFunctionRole.Arn

    # Authentication
    UserPoolId:
        Value: !Ref UserPool
    UserPoolClientId:
        Value: !Ref UserPoolClient
    IdentityPoolId:
        Value: !Ref IdentityPool
