---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'HellUpLine Uploader Application'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: {default: 'Application Parameters'}
            Parameters:
              - KeyPrefix
          - Label: {default: 'Api Parameters'}
            Parameters:
              - AcmCertificateArn
              - DomainName

Parameters:
    KeyPrefix:
        Description: 'Prefix used in s3 bucket to store user files'
        Type: String
        Default: 'user-files'
    AcmCertificateArn:
        Description: 'The ARN of the SSL certificate to use for the ApiGateway.'
        Type: String
    DomainName:
        Description: 'The application domain name.'
        Type: String

Mappings: {}

Conditions: {}

Globals:
    Function:
        Runtime: python3.7
        MemorySize: 128
        Timeout: 3
        Environment:
            Variables:
                BUCKET_NAME: !Ref UploadBucket
                KEY_PREFIX: !Ref KeyPrefix
                TABLE_NAME: !Ref UploadTable


Resources:
    #
    # Functions
    #
    ObjectsListFunction:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt ObjectsApiFunctionRole.Arn
            CodeUri: objects_api/
            Handler: objects_list.lambda_handler
            Events:
                ObjectsApi:
                    Type: Api
                    Properties:
                        RestApiId: !Ref RestApi
                        Auth: {Authorizer: CognitoAuthorizer}
                        Path: /objects
                        Method: GET

    ObjectsCreateFunction:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt ObjectsApiFunctionRole.Arn
            CodeUri: objects_api/
            Handler: objects_create.lambda_handler
            Events:
                ObjectsApi:
                    Type: Api
                    Properties:
                        RestApiId: !Ref RestApi
                        Auth: {Authorizer: CognitoAuthorizer}
                        Path: /objects
                        Method: POST

    ObjectDownloadFunction:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt ObjectsApiFunctionRole.Arn
            CodeUri: objects_api/
            Handler: object_download.lambda_handler
            Events:
                ObjectsApi:
                    Type: Api
                    Properties:
                        RestApiId: !Ref RestApi
                        Auth: {Authorizer: CognitoAuthorizer}
                        Path: /objects/{object_id}/download
                        Method: GET

    ObjectGetFunction:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt ObjectsApiFunctionRole.Arn
            CodeUri: objects_api/
            Handler: object_get.lambda_handler
            Events:
                ObjectsApi:
                    Type: Api
                    Properties:
                        RestApiId: !Ref RestApi
                        Auth: {Authorizer: CognitoAuthorizer}
                        Path: /objects/{object_id}
                        Method: GET

    ObjectUpdateFunction:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt ObjectsApiFunctionRole.Arn
            CodeUri: objects_api/
            Handler: object_update.lambda_handler
            Events:
                ObjectsApi:
                    Type: Api
                    Properties:
                        RestApiId: !Ref RestApi
                        Auth: {Authorizer: CognitoAuthorizer}
                        Path: /objects/{object_id}
                        Method: PUT,PATCH

    ObjectDeleteFunction:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt ObjectsApiFunctionRole.Arn
            CodeUri: objects_api/
            Handler: object_delete.lambda_handler
            Events:
                ObjectsApi:
                    Type: Api
                    Properties:
                        RestApiId: !Ref RestApi
                        Auth: {Authorizer: CognitoAuthorizer}
                        Path: /objects/{object_id}
                        Method: DELETE

    ObjectsApiFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Principal: {Service: ['lambda.amazonaws.com'] }
                    Action: ['sts:AssumeRole']
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            Policies:
              - PolicyName: dynamodb-crud
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'dynamodb:GetItem'
                          - 'dynamodb:PutItem'
                          - 'dynamodb:DeleteItem'
                          - 'dynamodb:Query'
                        Resource:
                          - !GetAtt UploadTable.Arn
              - PolicyName: s3-crud
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - 's3:GetObject'
                          - 's3:PutObject'
                          - 's3:DeleteObject'
                        Resource:
                          - !Sub '${UploadBucket.Arn}/${KeyPrefix}/*'
    #
    # Api
    #
    RestApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: Prod
            Cors:
                AllowMethods: "'OPTIONS,HEAD,GET,POST,PATCH,PUT,DELETE'"
                AllowHeaders: "'X-Forwarded-For,Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                AllowOrigin: "'*'"
                MaxAge: "'600'"
                AllowCredentials: "'true'"
            Auth:
                # DefaultAuthorizer: CognitoAuthorizer
                Authorizers:
                    CognitoAuthorizer:
                        UserPoolArn: !GetAtt UserPool.Arn
            MethodSettings:
              - HttpMethod: '*'
                ResourcePath: '/*'
                LoggingLevel: INFO
                DataTraceEnabled: true
                MetricsEnabled: true

    RestApiDomainName:
        Type: AWS::ApiGateway::DomainName
        Properties:
            CertificateArn: !Ref AcmCertificateArn
            DomainName: !Ref DomainName

    RestApiPathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        Properties:
            DomainName: !Ref RestApiDomainName
            RestApiId: !Ref RestApi
            Stage: Prod

    #
    # Storage
    #
    UploadBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: True
                BlockPublicPolicy: True
                IgnorePublicAcls: True
                RestrictPublicBuckets: True
            CorsConfiguration:
                CorsRules:
                  - Id: SignedUrlLambda
                    AllowedMethods: ['GET', 'POST', 'PUT']
                    AllowedHeaders: ['*']
                    AllowedOrigins: ['*']
                    ExposedHeaders: ['ContentType', 'Date']
                    MaxAge: 3600
            LifecycleConfiguration:
                Rules:
                  - Id: IncompleteUploads
                    Status: Enabled
                    AbortIncompleteMultipartUpload:
                        DaysAfterInitiation: 5

    UploadTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
              - {AttributeName: 'user_id', AttributeType: 'S'}
              - {AttributeName: 'object_id', AttributeType: 'S'}
            KeySchema:
              - {AttributeName: 'user_id', KeyType: 'HASH'}
              - {AttributeName: 'object_id', KeyType: 'RANGE'}

    #
    # Authentication
    #
    UserPool:
        Type: AWS::Cognito::UserPool
        # Properties:
        #     AdminCreateUserConfig:
        #         AllowAdminCreateUserOnly: true
        #         UnusedAccountValidityDays: 30
        #         InviteMessageTemplate:
        #             EmailMessage: 'Your username is {username} and temporary password is {####}.'
        #             EmailSubject: 'Your temporary password'
        #     SmsConfiguration:
        #         ExternalId: !Sub '${AWS::StackName}-external'
        #         SnsCallerArn: !GetAtt SMSRole.Arn
        #     SmsVerificationMessage: 'Your verification code is {####}.'
        #     SmsAuthenticationMessage: 'Your authentication code is {####}.'
        #     EmailConfiguration:
        #         ReplyToEmailAddress: donotreply@domain.tld
        #         EmailSendingAccount: COGNITO_DEFAULT
        #     EmailVerificationMessage: 'Your verification code is {####}.'
        #     EmailVerificationSubject: 'Your verification code'
        #     MfaConfiguration: 'OPTIONAL'
        #     AutoVerifiedAttributes:
        #       - email
        #     UsernameAttributes:
        #       - email
        #     Policies:
        #         PasswordPolicy:
        #             MinimumLength: 12
        #             RequireLowercase: true
        #             RequireNumbers: true
        #             RequireSymbols: true
        #             RequireUppercase: true
        #     Schema:
        #       - AttributeDataType: String
        #         Name: email
        #         Mutable: false
        #         Required: true
        #       - AttributeDataType: String
        #         Name: name
        #         StringAttributeConstraints:
        #             MaxLength: 255
        #             MinLength: 6
        #         Mutable: true
        #         Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
            - USER_PASSWORD_AUTH

    # SMSRole:
    #     Type: AWS::IAM::Role
    #     Properties:
    #         AssumeRolePolicyDocument:
    #             Version: '2012-10-17'
    #             Statement:
    #               - Effect: 'Allow'
    #                 Principal: {Service: ['cognito-idp.amazonaws.com'] }
    #                 Action: ['sts:AssumeRole']
    #         Policies:
    #           - PolicyName: cognito-sns-sms
    #             PolicyDocument:
    #                 Version: '2012-10-17'
    #                 Statement:
    #                   - Effect: 'Allow'
    #                     Action:
    #                       - 'sns:publish'
    #                     Resource:
    #                       - '*'



Outputs:
    EndpointDomainName:
        Description: 'API Gateway endpoint URL for Prod stage'
        # Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
        Value: !Sub 'https://${DomainName}'

    # Functions
    ObjectsListFunction:
        Description: 'Objects List Lambda Function ARN'
        Value: !GetAtt ObjectsListFunction.Arn
    ObjectdCreateFunction:
        Description: 'Objects Create Lambda Function ARN'
        Value: !GetAtt ObjectsCreateFunction.Arn
    ObjectdDownloadFunction:
        Description: 'Object Download Lambda Function ARN'
        Value: !GetAtt ObjectDownloadFunction.Arn
    ObjectdGetFunction:
        Description: 'Object Get Lambda Function ARN'
        Value: !GetAtt ObjectGetFunction.Arn
    ObjectdUpdateFunction:
        Description: 'Object Update Lambda Function ARN'
        Value: !GetAtt ObjectUpdateFunction.Arn
    ObjectdDeteteFunction:
        Description: 'Object Detete Lambda Function ARN'
        Value: !GetAtt ObjectDeleteFunction.Arn

    # Storage
    UploadBucket:
        Description: 'Bucket where files are stored'
        Value: !Ref UploadBucket
    UploadTable:
        Description: 'Table where metadata are stored'
        Value: !Ref UploadTable

    # Authentication
    UserPoolId:
        Value: !Ref UserPool
    UserPoolClientId:
        Value: !Ref UserPoolClient
